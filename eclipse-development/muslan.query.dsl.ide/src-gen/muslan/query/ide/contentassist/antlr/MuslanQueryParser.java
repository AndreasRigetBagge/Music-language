/*
 * generated by Xtext 2.38.0
 */
package muslan.query.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import muslan.query.ide.contentassist.antlr.internal.InternalMuslanQueryParser;
import muslan.query.services.MuslanQueryGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MuslanQueryParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MuslanQueryGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MuslanQueryGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getFilterClauseAccess().getAlternatives(), "rule__FilterClause__Alternatives");
			builder.put(grammarAccess.getClauseAccess().getAlternatives(), "rule__Clause__Alternatives");
			builder.put(grammarAccess.getOrClauseAccess().getAlternatives_3_0(), "rule__OrClause__Alternatives_3_0");
			builder.put(grammarAccess.getOrContentAccess().getAlternatives(), "rule__OrContent__Alternatives");
			builder.put(grammarAccess.getAndClauseAccess().getAlternatives_3_0(), "rule__AndClause__Alternatives_3_0");
			builder.put(grammarAccess.getAndContentAccess().getAlternatives(), "rule__AndContent__Alternatives");
			builder.put(grammarAccess.getCategorizedElementTypeAccess().getAlternatives(), "rule__CategorizedElementType__Alternatives");
			builder.put(grammarAccess.getCategoryTypeAccess().getAlternatives(), "rule__CategoryType__Alternatives");
			builder.put(grammarAccess.getOperatorTypeAccess().getAlternatives(), "rule__OperatorType__Alternatives");
			builder.put(grammarAccess.getRestrictedOperatorTypeAccess().getAlternatives(), "rule__RestrictedOperatorType__Alternatives");
			builder.put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
			builder.put(grammarAccess.getCategoryClauseAccess().getGroup(), "rule__CategoryClause__Group__0");
			builder.put(grammarAccess.getArtistClauseAccess().getGroup(), "rule__ArtistClause__Group__0");
			builder.put(grammarAccess.getTitleClauseAccess().getGroup(), "rule__TitleClause__Group__0");
			builder.put(grammarAccess.getOrClauseAccess().getGroup(), "rule__OrClause__Group__0");
			builder.put(grammarAccess.getOrClauseAccess().getGroup_3(), "rule__OrClause__Group_3__0");
			builder.put(grammarAccess.getAndClauseAccess().getGroup(), "rule__AndClause__Group__0");
			builder.put(grammarAccess.getAndClauseAccess().getGroup_3(), "rule__AndClause__Group_3__0");
			builder.put(grammarAccess.getQueryAccess().getTypeAssignment_2(), "rule__Query__TypeAssignment_2");
			builder.put(grammarAccess.getQueryAccess().getCollectionAssignment_4(), "rule__Query__CollectionAssignment_4");
			builder.put(grammarAccess.getQueryAccess().getFilterAssignment_6(), "rule__Query__FilterAssignment_6");
			builder.put(grammarAccess.getCategoryClauseAccess().getCategoryAssignment_0(), "rule__CategoryClause__CategoryAssignment_0");
			builder.put(grammarAccess.getCategoryClauseAccess().getOperatorAssignment_1(), "rule__CategoryClause__OperatorAssignment_1");
			builder.put(grammarAccess.getCategoryClauseAccess().getValueAssignment_2(), "rule__CategoryClause__ValueAssignment_2");
			builder.put(grammarAccess.getArtistClauseAccess().getOperatorAssignment_1(), "rule__ArtistClause__OperatorAssignment_1");
			builder.put(grammarAccess.getArtistClauseAccess().getValueAssignment_2(), "rule__ArtistClause__ValueAssignment_2");
			builder.put(grammarAccess.getTitleClauseAccess().getOperatorAssignment_1(), "rule__TitleClause__OperatorAssignment_1");
			builder.put(grammarAccess.getTitleClauseAccess().getValueAssignment_2(), "rule__TitleClause__ValueAssignment_2");
			builder.put(grammarAccess.getOrClauseAccess().getFilterclauseAssignment_2(), "rule__OrClause__FilterclauseAssignment_2");
			builder.put(grammarAccess.getOrClauseAccess().getFilterclauseAssignment_3_1(), "rule__OrClause__FilterclauseAssignment_3_1");
			builder.put(grammarAccess.getAndClauseAccess().getFilterclauseAssignment_2(), "rule__AndClause__FilterclauseAssignment_2");
			builder.put(grammarAccess.getAndClauseAccess().getFilterclauseAssignment_3_1(), "rule__AndClause__FilterclauseAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MuslanQueryGrammarAccess grammarAccess;

	@Override
	protected InternalMuslanQueryParser createParser() {
		InternalMuslanQueryParser result = new InternalMuslanQueryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MuslanQueryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MuslanQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
