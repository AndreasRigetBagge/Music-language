/*
 * generated by Xtext 2.38.0
 */
parser grammar InternalMuslanQueryParser;

options {
	tokenVocab=InternalMuslanQueryLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package muslan.query.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import muslan.query.services.MuslanQueryGrammarAccess;

}
@members {
	private MuslanQueryGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Tag", "'tag'");
		tokenNameToValue.put("Both", "'both'");
		tokenNameToValue.put("From", "'from'");
		tokenNameToValue.put("Pick", "'pick'");
		tokenNameToValue.put("With", "'with'");
		tokenNameToValue.put("Album", "'album'");
		tokenNameToValue.put("Genre", "'genre'");
		tokenNameToValue.put("Title", "'title'");
		tokenNameToValue.put("Track", "'track'");
		tokenNameToValue.put("Artist", "'artist'");
		tokenNameToValue.put("Either", "'either'");
		tokenNameToValue.put("Rating", "'rating'");
	}

	public void setGrammarAccess(MuslanQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getGroup()); }
		(rule__Query__Group__0)
		{ after(grammarAccess.getQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilterClause
entryRuleFilterClause
:
{ before(grammarAccess.getFilterClauseRule()); }
	 ruleFilterClause
{ after(grammarAccess.getFilterClauseRule()); } 
	 EOF 
;

// Rule FilterClause
ruleFilterClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterClauseAccess().getAlternatives()); }
		(rule__FilterClause__Alternatives)
		{ after(grammarAccess.getFilterClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getAlternatives()); }
		(rule__Clause__Alternatives)
		{ after(grammarAccess.getClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCategoryClause
entryRuleCategoryClause
:
{ before(grammarAccess.getCategoryClauseRule()); }
	 ruleCategoryClause
{ after(grammarAccess.getCategoryClauseRule()); } 
	 EOF 
;

// Rule CategoryClause
ruleCategoryClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCategoryClauseAccess().getGroup()); }
		(rule__CategoryClause__Group__0)
		{ after(grammarAccess.getCategoryClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArtistClause
entryRuleArtistClause
:
{ before(grammarAccess.getArtistClauseRule()); }
	 ruleArtistClause
{ after(grammarAccess.getArtistClauseRule()); } 
	 EOF 
;

// Rule ArtistClause
ruleArtistClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArtistClauseAccess().getGroup()); }
		(rule__ArtistClause__Group__0)
		{ after(grammarAccess.getArtistClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitleClause
entryRuleTitleClause
:
{ before(grammarAccess.getTitleClauseRule()); }
	 ruleTitleClause
{ after(grammarAccess.getTitleClauseRule()); } 
	 EOF 
;

// Rule TitleClause
ruleTitleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitleClauseAccess().getGroup()); }
		(rule__TitleClause__Group__0)
		{ after(grammarAccess.getTitleClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrClause
entryRuleOrClause
:
{ before(grammarAccess.getOrClauseRule()); }
	 ruleOrClause
{ after(grammarAccess.getOrClauseRule()); } 
	 EOF 
;

// Rule OrClause
ruleOrClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrClauseAccess().getGroup()); }
		(rule__OrClause__Group__0)
		{ after(grammarAccess.getOrClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrContent
entryRuleOrContent
:
{ before(grammarAccess.getOrContentRule()); }
	 ruleOrContent
{ after(grammarAccess.getOrContentRule()); } 
	 EOF 
;

// Rule OrContent
ruleOrContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrContentAccess().getAlternatives()); }
		(rule__OrContent__Alternatives)
		{ after(grammarAccess.getOrContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndClause
entryRuleAndClause
:
{ before(grammarAccess.getAndClauseRule()); }
	 ruleAndClause
{ after(grammarAccess.getAndClauseRule()); } 
	 EOF 
;

// Rule AndClause
ruleAndClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndClauseAccess().getGroup()); }
		(rule__AndClause__Group__0)
		{ after(grammarAccess.getAndClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndContent
entryRuleAndContent
:
{ before(grammarAccess.getAndContentRule()); }
	 ruleAndContent
{ after(grammarAccess.getAndContentRule()); } 
	 EOF 
;

// Rule AndContent
ruleAndContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndContentAccess().getAlternatives()); }
		(rule__AndContent__Alternatives)
		{ after(grammarAccess.getAndContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CategorizedElementType
ruleCategorizedElementType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategorizedElementTypeAccess().getAlternatives()); }
		(rule__CategorizedElementType__Alternatives)
		{ after(grammarAccess.getCategorizedElementTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CategoryType
ruleCategoryType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryTypeAccess().getAlternatives()); }
		(rule__CategoryType__Alternatives)
		{ after(grammarAccess.getCategoryTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OperatorType
ruleOperatorType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorTypeAccess().getAlternatives()); }
		(rule__OperatorType__Alternatives)
		{ after(grammarAccess.getOperatorTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RestrictedOperatorType
ruleRestrictedOperatorType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestrictedOperatorTypeAccess().getAlternatives()); }
		(rule__RestrictedOperatorType__Alternatives)
		{ after(grammarAccess.getRestrictedOperatorTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterClause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterClauseAccess().getClauseParserRuleCall_0()); }
		ruleClause
		{ after(grammarAccess.getFilterClauseAccess().getClauseParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFilterClauseAccess().getOrClauseParserRuleCall_1()); }
		ruleOrClause
		{ after(grammarAccess.getFilterClauseAccess().getOrClauseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFilterClauseAccess().getAndClauseParserRuleCall_2()); }
		ruleAndClause
		{ after(grammarAccess.getFilterClauseAccess().getAndClauseParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getCategoryClauseParserRuleCall_0()); }
		ruleCategoryClause
		{ after(grammarAccess.getClauseAccess().getCategoryClauseParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getArtistClauseParserRuleCall_1()); }
		ruleArtistClause
		{ after(grammarAccess.getClauseAccess().getArtistClauseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getTitleClauseParserRuleCall_2()); }
		ruleTitleClause
		{ after(grammarAccess.getClauseAccess().getTitleClauseParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrClauseAccess().getOrKeyword_3_0_0()); }
		Or
		{ after(grammarAccess.getOrClauseAccess().getOrKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrClauseAccess().getCommaKeyword_3_0_1()); }
		Comma
		{ after(grammarAccess.getOrClauseAccess().getCommaKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrContent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrContentAccess().getClauseParserRuleCall_0()); }
		ruleClause
		{ after(grammarAccess.getOrContentAccess().getClauseParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrContentAccess().getAndClauseParserRuleCall_1()); }
		ruleAndClause
		{ after(grammarAccess.getOrContentAccess().getAndClauseParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndClauseAccess().getAndKeyword_3_0_0()); }
		And
		{ after(grammarAccess.getAndClauseAccess().getAndKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndClauseAccess().getCommaKeyword_3_0_1()); }
		Comma
		{ after(grammarAccess.getAndClauseAccess().getCommaKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndContent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndContentAccess().getClauseParserRuleCall_0()); }
		ruleClause
		{ after(grammarAccess.getAndContentAccess().getClauseParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndContentAccess().getOrClauseParserRuleCall_1()); }
		ruleOrClause
		{ after(grammarAccess.getAndContentAccess().getOrClauseParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CategorizedElementType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategorizedElementTypeAccess().getTrackEnumLiteralDeclaration_0()); }
		(Track)
		{ after(grammarAccess.getCategorizedElementTypeAccess().getTrackEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCategorizedElementTypeAccess().getAlbumEnumLiteralDeclaration_1()); }
		(Album)
		{ after(grammarAccess.getCategorizedElementTypeAccess().getAlbumEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryTypeAccess().getRatingEnumLiteralDeclaration_0()); }
		(Rating)
		{ after(grammarAccess.getCategoryTypeAccess().getRatingEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCategoryTypeAccess().getGenreEnumLiteralDeclaration_1()); }
		(Genre)
		{ after(grammarAccess.getCategoryTypeAccess().getGenreEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCategoryTypeAccess().getTagEnumLiteralDeclaration_2()); }
		(Tag)
		{ after(grammarAccess.getCategoryTypeAccess().getTagEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0()); }
		(EqualsSign)
		{ after(grammarAccess.getOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1()); }
		(Not)
		{ after(grammarAccess.getOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorTypeAccess().getLessThanEnumLiteralDeclaration_2()); }
		(LessThanSign)
		{ after(grammarAccess.getOperatorTypeAccess().getLessThanEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorTypeAccess().getGreaterThanEnumLiteralDeclaration_3()); }
		(GreaterThanSign)
		{ after(grammarAccess.getOperatorTypeAccess().getGreaterThanEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedOperatorType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestrictedOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0()); }
		(EqualsSign)
		{ after(grammarAccess.getRestrictedOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRestrictedOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1()); }
		(Not)
		{ after(grammarAccess.getRestrictedOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getQueryAction_0()); }
	()
	{ after(grammarAccess.getQueryAccess().getQueryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__1__Impl
	rule__Query__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getPickKeyword_1()); }
	Pick
	{ after(grammarAccess.getQueryAccess().getPickKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__2__Impl
	rule__Query__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getTypeAssignment_2()); }
	(rule__Query__TypeAssignment_2)
	{ after(grammarAccess.getQueryAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__3__Impl
	rule__Query__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getFromKeyword_3()); }
	From
	{ after(grammarAccess.getQueryAccess().getFromKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__4__Impl
	rule__Query__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getCollectionAssignment_4()); }
	(rule__Query__CollectionAssignment_4)
	{ after(grammarAccess.getQueryAccess().getCollectionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__5__Impl
	rule__Query__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getWithKeyword_5()); }
	With
	{ after(grammarAccess.getQueryAccess().getWithKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getFilterAssignment_6()); }
	(rule__Query__FilterAssignment_6)
	{ after(grammarAccess.getQueryAccess().getFilterAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CategoryClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CategoryClause__Group__0__Impl
	rule__CategoryClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCategoryClauseAccess().getCategoryAssignment_0()); }
	(rule__CategoryClause__CategoryAssignment_0)
	{ after(grammarAccess.getCategoryClauseAccess().getCategoryAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CategoryClause__Group__1__Impl
	rule__CategoryClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCategoryClauseAccess().getOperatorAssignment_1()); }
	(rule__CategoryClause__OperatorAssignment_1)
	{ after(grammarAccess.getCategoryClauseAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CategoryClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCategoryClauseAccess().getValueAssignment_2()); }
	(rule__CategoryClause__ValueAssignment_2)
	{ after(grammarAccess.getCategoryClauseAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArtistClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArtistClause__Group__0__Impl
	rule__ArtistClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArtistClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArtistClauseAccess().getArtistKeyword_0()); }
	Artist
	{ after(grammarAccess.getArtistClauseAccess().getArtistKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArtistClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArtistClause__Group__1__Impl
	rule__ArtistClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArtistClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArtistClauseAccess().getOperatorAssignment_1()); }
	(rule__ArtistClause__OperatorAssignment_1)
	{ after(grammarAccess.getArtistClauseAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArtistClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArtistClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArtistClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArtistClauseAccess().getValueAssignment_2()); }
	(rule__ArtistClause__ValueAssignment_2)
	{ after(grammarAccess.getArtistClauseAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TitleClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TitleClause__Group__0__Impl
	rule__TitleClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleClauseAccess().getTitleKeyword_0()); }
	Title
	{ after(grammarAccess.getTitleClauseAccess().getTitleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TitleClause__Group__1__Impl
	rule__TitleClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleClauseAccess().getOperatorAssignment_1()); }
	(rule__TitleClause__OperatorAssignment_1)
	{ after(grammarAccess.getTitleClauseAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TitleClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleClauseAccess().getValueAssignment_2()); }
	(rule__TitleClause__ValueAssignment_2)
	{ after(grammarAccess.getTitleClauseAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrClause__Group__0__Impl
	rule__OrClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrClauseAccess().getEitherKeyword_0()); }
	Either
	{ after(grammarAccess.getOrClauseAccess().getEitherKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrClause__Group__1__Impl
	rule__OrClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrClauseAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getOrClauseAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrClause__Group__2__Impl
	rule__OrClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrClauseAccess().getFilterclauseAssignment_2()); }
	(rule__OrClause__FilterclauseAssignment_2)
	{ after(grammarAccess.getOrClauseAccess().getFilterclauseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrClause__Group__3__Impl
	rule__OrClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOrClauseAccess().getGroup_3()); }
		(rule__OrClause__Group_3__0)
		{ after(grammarAccess.getOrClauseAccess().getGroup_3()); }
	)
	(
		{ before(grammarAccess.getOrClauseAccess().getGroup_3()); }
		(rule__OrClause__Group_3__0)*
		{ after(grammarAccess.getOrClauseAccess().getGroup_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrClauseAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getOrClauseAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrClause__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrClause__Group_3__0__Impl
	rule__OrClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrClauseAccess().getAlternatives_3_0()); }
	(rule__OrClause__Alternatives_3_0)?
	{ after(grammarAccess.getOrClauseAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrClauseAccess().getFilterclauseAssignment_3_1()); }
	(rule__OrClause__FilterclauseAssignment_3_1)
	{ after(grammarAccess.getOrClauseAccess().getFilterclauseAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndClause__Group__0__Impl
	rule__AndClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndClauseAccess().getBothKeyword_0()); }
	Both
	{ after(grammarAccess.getAndClauseAccess().getBothKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndClause__Group__1__Impl
	rule__AndClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndClauseAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getAndClauseAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndClause__Group__2__Impl
	rule__AndClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndClauseAccess().getFilterclauseAssignment_2()); }
	(rule__AndClause__FilterclauseAssignment_2)
	{ after(grammarAccess.getAndClauseAccess().getFilterclauseAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndClause__Group__3__Impl
	rule__AndClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAndClauseAccess().getGroup_3()); }
		(rule__AndClause__Group_3__0)
		{ after(grammarAccess.getAndClauseAccess().getGroup_3()); }
	)
	(
		{ before(grammarAccess.getAndClauseAccess().getGroup_3()); }
		(rule__AndClause__Group_3__0)*
		{ after(grammarAccess.getAndClauseAccess().getGroup_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndClauseAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getAndClauseAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndClause__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndClause__Group_3__0__Impl
	rule__AndClause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndClauseAccess().getAlternatives_3_0()); }
	(rule__AndClause__Alternatives_3_0)?
	{ after(grammarAccess.getAndClauseAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndClause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndClauseAccess().getFilterclauseAssignment_3_1()); }
	(rule__AndClause__FilterclauseAssignment_3_1)
	{ after(grammarAccess.getAndClauseAccess().getFilterclauseAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getTypeCategorizedElementTypeEnumRuleCall_2_0()); }
		ruleCategorizedElementType
		{ after(grammarAccess.getQueryAccess().getTypeCategorizedElementTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__CollectionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getCollectionMusicCollectionCrossReference_4_0()); }
		(
			{ before(grammarAccess.getQueryAccess().getCollectionMusicCollectionEStringParserRuleCall_4_0_1()); }
			ruleEString
			{ after(grammarAccess.getQueryAccess().getCollectionMusicCollectionEStringParserRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getQueryAccess().getCollectionMusicCollectionCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__FilterAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getFilterFilterClauseParserRuleCall_6_0()); }
		ruleFilterClause
		{ after(grammarAccess.getQueryAccess().getFilterFilterClauseParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__CategoryAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryClauseAccess().getCategoryCategoryTypeEnumRuleCall_0_0()); }
		ruleCategoryType
		{ after(grammarAccess.getCategoryClauseAccess().getCategoryCategoryTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryClauseAccess().getOperatorOperatorTypeEnumRuleCall_1_0()); }
		ruleOperatorType
		{ after(grammarAccess.getCategoryClauseAccess().getOperatorOperatorTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CategoryClause__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCategoryClauseAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCategoryClauseAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArtistClause__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArtistClauseAccess().getOperatorRestrictedOperatorTypeEnumRuleCall_1_0()); }
		ruleRestrictedOperatorType
		{ after(grammarAccess.getArtistClauseAccess().getOperatorRestrictedOperatorTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArtistClause__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArtistClauseAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getArtistClauseAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleClause__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleClauseAccess().getOperatorRestrictedOperatorTypeEnumRuleCall_1_0()); }
		ruleRestrictedOperatorType
		{ after(grammarAccess.getTitleClauseAccess().getOperatorRestrictedOperatorTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleClause__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleClauseAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTitleClauseAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__FilterclauseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrClauseAccess().getFilterclauseOrContentParserRuleCall_2_0()); }
		ruleOrContent
		{ after(grammarAccess.getOrClauseAccess().getFilterclauseOrContentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrClause__FilterclauseAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrClauseAccess().getFilterclauseOrContentParserRuleCall_3_1_0()); }
		ruleOrContent
		{ after(grammarAccess.getOrClauseAccess().getFilterclauseOrContentParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__FilterclauseAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndClauseAccess().getFilterclauseAndContentParserRuleCall_2_0()); }
		ruleAndContent
		{ after(grammarAccess.getAndClauseAccess().getFilterclauseAndContentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndClause__FilterclauseAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndClauseAccess().getFilterclauseAndContentParserRuleCall_3_1_0()); }
		ruleAndContent
		{ after(grammarAccess.getAndClauseAccess().getFilterclauseAndContentParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
