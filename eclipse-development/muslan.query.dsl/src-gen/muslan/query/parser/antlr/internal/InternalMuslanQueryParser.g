/*
 * generated by Xtext 2.38.0
 */
parser grammar InternalMuslanQueryParser;

options {
	tokenVocab=InternalMuslanQueryLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package muslan.query.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import muslan.query.services.MuslanQueryGrammarAccess;

}

@members {

 	private MuslanQueryGrammarAccess grammarAccess;

    public InternalMuslanQueryParser(TokenStream input, MuslanQueryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Query";
   	}

   	@Override
   	protected MuslanQueryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQueryAccess().getQueryAction_0(),
					$current);
			}
		)
		otherlv_1=Pick
		{
			newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getPickKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getTypeCategorizedElementTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleCategorizedElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"muslan.query.MuslanQuery.CategorizedElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=From
		{
			newLeafNode(otherlv_3, grammarAccess.getQueryAccess().getFromKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQueryRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getQueryAccess().getCollectionMusicCollectionCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=With
		{
			newLeafNode(otherlv_5, grammarAccess.getQueryAccess().getWithKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getFilterFilterClauseParserRuleCall_6_0());
				}
				lv_filter_6_0=ruleFilterClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"filter",
						lv_filter_6_0,
						"muslan.query.MuslanQuery.FilterClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFilterClause
entryRuleFilterClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterClauseRule()); }
	iv_ruleFilterClause=ruleFilterClause
	{ $current=$iv_ruleFilterClause.current; }
	EOF;

// Rule FilterClause
ruleFilterClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFilterClauseAccess().getClauseParserRuleCall_0());
		}
		this_Clause_0=ruleClause
		{
			$current = $this_Clause_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterClauseAccess().getOrClauseParserRuleCall_1());
		}
		this_OrClause_1=ruleOrClause
		{
			$current = $this_OrClause_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterClauseAccess().getAndClauseParserRuleCall_2());
		}
		this_AndClause_2=ruleAndClause
		{
			$current = $this_AndClause_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClauseAccess().getCategoryClauseParserRuleCall_0());
		}
		this_CategoryClause_0=ruleCategoryClause
		{
			$current = $this_CategoryClause_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClauseAccess().getArtistClauseParserRuleCall_1());
		}
		this_ArtistClause_1=ruleArtistClause
		{
			$current = $this_ArtistClause_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClauseAccess().getTitleClauseParserRuleCall_2());
		}
		this_TitleClause_2=ruleTitleClause
		{
			$current = $this_TitleClause_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCategoryClause
entryRuleCategoryClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCategoryClauseRule()); }
	iv_ruleCategoryClause=ruleCategoryClause
	{ $current=$iv_ruleCategoryClause.current; }
	EOF;

// Rule CategoryClause
ruleCategoryClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCategoryClauseAccess().getCategoryCategoryTypeEnumRuleCall_0_0());
				}
				lv_category_0_0=ruleCategoryType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCategoryClauseRule());
					}
					set(
						$current,
						"category",
						lv_category_0_0,
						"muslan.query.MuslanQuery.CategoryType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCategoryClauseAccess().getOperatorOperatorTypeEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleOperatorType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCategoryClauseRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"muslan.query.MuslanQuery.OperatorType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getCategoryClauseAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCategoryClauseRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleArtistClause
entryRuleArtistClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArtistClauseRule()); }
	iv_ruleArtistClause=ruleArtistClause
	{ $current=$iv_ruleArtistClause.current; }
	EOF;

// Rule ArtistClause
ruleArtistClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Artist
		{
			newLeafNode(otherlv_0, grammarAccess.getArtistClauseAccess().getArtistKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArtistClauseAccess().getOperatorRestrictedOperatorTypeEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleRestrictedOperatorType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArtistClauseRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"muslan.query.MuslanQuery.RestrictedOperatorType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getArtistClauseAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArtistClauseRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTitleClause
entryRuleTitleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTitleClauseRule()); }
	iv_ruleTitleClause=ruleTitleClause
	{ $current=$iv_ruleTitleClause.current; }
	EOF;

// Rule TitleClause
ruleTitleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Title
		{
			newLeafNode(otherlv_0, grammarAccess.getTitleClauseAccess().getTitleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTitleClauseAccess().getOperatorRestrictedOperatorTypeEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleRestrictedOperatorType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTitleClauseRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"muslan.query.MuslanQuery.RestrictedOperatorType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getTitleClauseAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTitleClauseRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleOrClause
entryRuleOrClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrClauseRule()); }
	iv_ruleOrClause=ruleOrClause
	{ $current=$iv_ruleOrClause.current; }
	EOF;

// Rule OrClause
ruleOrClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Either
		{
			newLeafNode(otherlv_0, grammarAccess.getOrClauseAccess().getEitherKeyword_0());
		}
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getOrClauseAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrClauseAccess().getFilterclauseOrContentParserRuleCall_2_0());
				}
				lv_filterclause_2_0=ruleOrContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrClauseRule());
					}
					add(
						$current,
						"filterclause",
						lv_filterclause_2_0,
						"muslan.query.MuslanQuery.OrContent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_3=Or
				{
					newLeafNode(otherlv_3, grammarAccess.getOrClauseAccess().getOrKeyword_3_0_0());
				}
				    |
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getOrClauseAccess().getCommaKeyword_3_0_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getOrClauseAccess().getFilterclauseOrContentParserRuleCall_3_1_0());
					}
					lv_filterclause_5_0=ruleOrContent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrClauseRule());
						}
						add(
							$current,
							"filterclause",
							lv_filterclause_5_0,
							"muslan.query.MuslanQuery.OrContent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getOrClauseAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleOrContent
entryRuleOrContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrContentRule()); }
	iv_ruleOrContent=ruleOrContent
	{ $current=$iv_ruleOrContent.current; }
	EOF;

// Rule OrContent
ruleOrContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrContentAccess().getClauseParserRuleCall_0());
		}
		this_Clause_0=ruleClause
		{
			$current = $this_Clause_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOrContentAccess().getAndClauseParserRuleCall_1());
		}
		this_AndClause_1=ruleAndClause
		{
			$current = $this_AndClause_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAndClause
entryRuleAndClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndClauseRule()); }
	iv_ruleAndClause=ruleAndClause
	{ $current=$iv_ruleAndClause.current; }
	EOF;

// Rule AndClause
ruleAndClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Both
		{
			newLeafNode(otherlv_0, grammarAccess.getAndClauseAccess().getBothKeyword_0());
		}
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getAndClauseAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndClauseAccess().getFilterclauseAndContentParserRuleCall_2_0());
				}
				lv_filterclause_2_0=ruleAndContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndClauseRule());
					}
					add(
						$current,
						"filterclause",
						lv_filterclause_2_0,
						"muslan.query.MuslanQuery.AndContent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_3=And
				{
					newLeafNode(otherlv_3, grammarAccess.getAndClauseAccess().getAndKeyword_3_0_0());
				}
				    |
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getAndClauseAccess().getCommaKeyword_3_0_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getAndClauseAccess().getFilterclauseAndContentParserRuleCall_3_1_0());
					}
					lv_filterclause_5_0=ruleAndContent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndClauseRule());
						}
						add(
							$current,
							"filterclause",
							lv_filterclause_5_0,
							"muslan.query.MuslanQuery.AndContent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getAndClauseAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAndContent
entryRuleAndContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndContentRule()); }
	iv_ruleAndContent=ruleAndContent
	{ $current=$iv_ruleAndContent.current; }
	EOF;

// Rule AndContent
ruleAndContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndContentAccess().getClauseParserRuleCall_0());
		}
		this_Clause_0=ruleClause
		{
			$current = $this_Clause_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAndContentAccess().getOrClauseParserRuleCall_1());
		}
		this_OrClause_1=ruleOrClause
		{
			$current = $this_OrClause_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Rule CategorizedElementType
ruleCategorizedElementType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Track
			{
				$current = grammarAccess.getCategorizedElementTypeAccess().getTrackEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCategorizedElementTypeAccess().getTrackEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Album
			{
				$current = grammarAccess.getCategorizedElementTypeAccess().getAlbumEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCategorizedElementTypeAccess().getAlbumEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CategoryType
ruleCategoryType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Rating
			{
				$current = grammarAccess.getCategoryTypeAccess().getRatingEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCategoryTypeAccess().getRatingEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Genre
			{
				$current = grammarAccess.getCategoryTypeAccess().getGenreEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCategoryTypeAccess().getGenreEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=Tag
			{
				$current = grammarAccess.getCategoryTypeAccess().getTagEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCategoryTypeAccess().getTagEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule OperatorType
ruleOperatorType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Not
			{
				$current = grammarAccess.getOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=LessThanSign
			{
				$current = grammarAccess.getOperatorTypeAccess().getLessThanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperatorTypeAccess().getLessThanEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=GreaterThanSign
			{
				$current = grammarAccess.getOperatorTypeAccess().getGreaterThanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperatorTypeAccess().getGreaterThanEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule RestrictedOperatorType
ruleRestrictedOperatorType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getRestrictedOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRestrictedOperatorTypeAccess().getSameAsEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Not
			{
				$current = grammarAccess.getRestrictedOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRestrictedOperatorTypeAccess().getDifferentFromEnumLiteralDeclaration_1());
			}
		)
	)
;
