/*
 * generated by Xtext 2.38.0
 */
package muslan.query.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MuslanQueryGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPickKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeCategorizedElementTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCollectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCollectionMusicCollectionCrossReference_4_0 = (CrossReference)cCollectionAssignment_4.eContents().get(0);
		private final RuleCall cCollectionMusicCollectionEStringParserRuleCall_4_0_1 = (RuleCall)cCollectionMusicCollectionCrossReference_4_0.eContents().get(1);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFilterAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFilterFilterClauseParserRuleCall_6_0 = (RuleCall)cFilterAssignment_6.eContents().get(0);
		
		//Query returns Query:
		//    {Query}
		//    "pick" type=CategorizedElementType "from" collection=[musiccollection::MusicCollection|EString] "with"
		//    filter=FilterClause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Query}
		//"pick" type=CategorizedElementType "from" collection=[musiccollection::MusicCollection|EString] "with"
		//filter=FilterClause
		public Group getGroup() { return cGroup; }
		
		//{Query}
		public Action getQueryAction_0() { return cQueryAction_0; }
		
		//"pick"
		public Keyword getPickKeyword_1() { return cPickKeyword_1; }
		
		//type=CategorizedElementType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//CategorizedElementType
		public RuleCall getTypeCategorizedElementTypeEnumRuleCall_2_0() { return cTypeCategorizedElementTypeEnumRuleCall_2_0; }
		
		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//collection=[musiccollection::MusicCollection|EString]
		public Assignment getCollectionAssignment_4() { return cCollectionAssignment_4; }
		
		//[musiccollection::MusicCollection|EString]
		public CrossReference getCollectionMusicCollectionCrossReference_4_0() { return cCollectionMusicCollectionCrossReference_4_0; }
		
		//EString
		public RuleCall getCollectionMusicCollectionEStringParserRuleCall_4_0_1() { return cCollectionMusicCollectionEStringParserRuleCall_4_0_1; }
		
		//"with"
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }
		
		//filter=FilterClause
		public Assignment getFilterAssignment_6() { return cFilterAssignment_6; }
		
		//FilterClause
		public RuleCall getFilterFilterClauseParserRuleCall_6_0() { return cFilterFilterClauseParserRuleCall_6_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FilterClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.FilterClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndClauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FilterClause:
		//     Clause | OrClause | AndClause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Clause | OrClause | AndClause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Clause
		public RuleCall getClauseParserRuleCall_0() { return cClauseParserRuleCall_0; }
		
		//OrClause
		public RuleCall getOrClauseParserRuleCall_1() { return cOrClauseParserRuleCall_1; }
		
		//AndClause
		public RuleCall getAndClauseParserRuleCall_2() { return cAndClauseParserRuleCall_2; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCategoryClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArtistClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTitleClauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Clause:
		//    CategoryClause | ArtistClause | TitleClause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CategoryClause | ArtistClause | TitleClause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CategoryClause
		public RuleCall getCategoryClauseParserRuleCall_0() { return cCategoryClauseParserRuleCall_0; }
		
		//ArtistClause
		public RuleCall getArtistClauseParserRuleCall_1() { return cArtistClauseParserRuleCall_1; }
		
		//TitleClause
		public RuleCall getTitleClauseParserRuleCall_2() { return cTitleClauseParserRuleCall_2; }
	}
	public class CategoryClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.CategoryClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCategoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCategoryCategoryTypeEnumRuleCall_0_0 = (RuleCall)cCategoryAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorTypeEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//CategoryClause:
		//    category=CategoryType operator=OperatorType value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//category=CategoryType operator=OperatorType value=STRING
		public Group getGroup() { return cGroup; }
		
		//category=CategoryType
		public Assignment getCategoryAssignment_0() { return cCategoryAssignment_0; }
		
		//CategoryType
		public RuleCall getCategoryCategoryTypeEnumRuleCall_0_0() { return cCategoryCategoryTypeEnumRuleCall_0_0; }
		
		//operator=OperatorType
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//OperatorType
		public RuleCall getOperatorOperatorTypeEnumRuleCall_1_0() { return cOperatorOperatorTypeEnumRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ArtistClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.ArtistClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtistKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorRestrictedOperatorTypeEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ArtistClause:
		//    "artist" operator=RestrictedOperatorType value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"artist" operator=RestrictedOperatorType value=STRING
		public Group getGroup() { return cGroup; }
		
		//"artist"
		public Keyword getArtistKeyword_0() { return cArtistKeyword_0; }
		
		//operator=RestrictedOperatorType
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//RestrictedOperatorType
		public RuleCall getOperatorRestrictedOperatorTypeEnumRuleCall_1_0() { return cOperatorRestrictedOperatorTypeEnumRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TitleClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.TitleClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorRestrictedOperatorTypeEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TitleClause:
		//    "title" operator=RestrictedOperatorType value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"title" operator=RestrictedOperatorType value=STRING
		public Group getGroup() { return cGroup; }
		
		//"title"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//operator=RestrictedOperatorType
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//RestrictedOperatorType
		public RuleCall getOperatorRestrictedOperatorTypeEnumRuleCall_1_0() { return cOperatorRestrictedOperatorTypeEnumRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class OrClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.OrClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEitherKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilterclauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilterclauseOrContentParserRuleCall_2_0 = (RuleCall)cFilterclauseAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cOrKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cFilterclauseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFilterclauseOrContentParserRuleCall_3_1_0 = (RuleCall)cFilterclauseAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrClause:
		//    "either" "(" filterclause+=OrContent (("or"|",")? filterclause+=OrContent)+ ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"either" "(" filterclause+=OrContent (("or"|",")? filterclause+=OrContent)+ ")"
		public Group getGroup() { return cGroup; }
		
		//"either"
		public Keyword getEitherKeyword_0() { return cEitherKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//filterclause+=OrContent
		public Assignment getFilterclauseAssignment_2() { return cFilterclauseAssignment_2; }
		
		//OrContent
		public RuleCall getFilterclauseOrContentParserRuleCall_2_0() { return cFilterclauseOrContentParserRuleCall_2_0; }
		
		//(("or"|",")? filterclause+=OrContent)+
		public Group getGroup_3() { return cGroup_3; }
		
		//("or"|",")?
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//"or"
		public Keyword getOrKeyword_3_0_0() { return cOrKeyword_3_0_0; }
		
		//","
		public Keyword getCommaKeyword_3_0_1() { return cCommaKeyword_3_0_1; }
		
		//filterclause+=OrContent
		public Assignment getFilterclauseAssignment_3_1() { return cFilterclauseAssignment_3_1; }
		
		//OrContent
		public RuleCall getFilterclauseOrContentParserRuleCall_3_1_0() { return cFilterclauseOrContentParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OrContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.OrContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OrContent returns FilterClause:
		//    Clause | AndClause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Clause | AndClause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Clause
		public RuleCall getClauseParserRuleCall_0() { return cClauseParserRuleCall_0; }
		
		//AndClause
		public RuleCall getAndClauseParserRuleCall_1() { return cAndClauseParserRuleCall_1; }
	}
	public class AndClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.AndClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBothKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilterclauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilterclauseAndContentParserRuleCall_2_0 = (RuleCall)cFilterclauseAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cAndKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cFilterclauseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFilterclauseAndContentParserRuleCall_3_1_0 = (RuleCall)cFilterclauseAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AndClause:
		//    "both" "(" filterclause+=AndContent (("and"|",")? filterclause+=AndContent)+ ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"both" "(" filterclause+=AndContent (("and"|",")? filterclause+=AndContent)+ ")"
		public Group getGroup() { return cGroup; }
		
		//"both"
		public Keyword getBothKeyword_0() { return cBothKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//filterclause+=AndContent
		public Assignment getFilterclauseAssignment_2() { return cFilterclauseAssignment_2; }
		
		//AndContent
		public RuleCall getFilterclauseAndContentParserRuleCall_2_0() { return cFilterclauseAndContentParserRuleCall_2_0; }
		
		//(("and"|",")? filterclause+=AndContent)+
		public Group getGroup_3() { return cGroup_3; }
		
		//("and"|",")?
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//"and"
		public Keyword getAndKeyword_3_0_0() { return cAndKeyword_3_0_0; }
		
		//","
		public Keyword getCommaKeyword_3_0_1() { return cCommaKeyword_3_0_1; }
		
		//filterclause+=AndContent
		public Assignment getFilterclauseAssignment_3_1() { return cFilterclauseAssignment_3_1; }
		
		//AndContent
		public RuleCall getFilterclauseAndContentParserRuleCall_3_1_0() { return cFilterclauseAndContentParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AndContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.AndContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AndContent returns FilterClause:
		//    Clause | OrClause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Clause | OrClause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Clause
		public RuleCall getClauseParserRuleCall_0() { return cClauseParserRuleCall_0; }
		
		//OrClause
		public RuleCall getOrClauseParserRuleCall_1() { return cOrClauseParserRuleCall_1; }
	}
	
	public class CategorizedElementTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.CategorizedElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrackEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrackTrackKeyword_0_0 = (Keyword)cTrackEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAlbumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAlbumAlbumKeyword_1_0 = (Keyword)cAlbumEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CategorizedElementType:
		//    Track = 'track' | Album = 'album'
		//;
		public EnumRule getRule() { return rule; }
		
		//Track = 'track' | Album = 'album'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Track = 'track'
		public EnumLiteralDeclaration getTrackEnumLiteralDeclaration_0() { return cTrackEnumLiteralDeclaration_0; }
		
		//'track'
		public Keyword getTrackTrackKeyword_0_0() { return cTrackTrackKeyword_0_0; }
		
		//Album = 'album'
		public EnumLiteralDeclaration getAlbumEnumLiteralDeclaration_1() { return cAlbumEnumLiteralDeclaration_1; }
		
		//'album'
		public Keyword getAlbumAlbumKeyword_1_0() { return cAlbumAlbumKeyword_1_0; }
	}
	public class CategoryTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.CategoryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRatingEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRatingRatingKeyword_0_0 = (Keyword)cRatingEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGenreEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGenreGenreKeyword_1_0 = (Keyword)cGenreEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTagEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTagTagKeyword_2_0 = (Keyword)cTagEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CategoryType returns musiccollection::CategoryType:
		//                Rating = 'rating' | Genre = 'genre' | Tag = 'tag'
		//;
		public EnumRule getRule() { return rule; }
		
		//Rating = 'rating' | Genre = 'genre' | Tag = 'tag'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Rating = 'rating'
		public EnumLiteralDeclaration getRatingEnumLiteralDeclaration_0() { return cRatingEnumLiteralDeclaration_0; }
		
		//'rating'
		public Keyword getRatingRatingKeyword_0_0() { return cRatingRatingKeyword_0_0; }
		
		//Genre = 'genre'
		public EnumLiteralDeclaration getGenreEnumLiteralDeclaration_1() { return cGenreEnumLiteralDeclaration_1; }
		
		//'genre'
		public Keyword getGenreGenreKeyword_1_0() { return cGenreGenreKeyword_1_0; }
		
		//Tag = 'tag'
		public EnumLiteralDeclaration getTagEnumLiteralDeclaration_2() { return cTagEnumLiteralDeclaration_2; }
		
		//'tag'
		public Keyword getTagTagKeyword_2_0() { return cTagTagKeyword_2_0; }
	}
	public class OperatorTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.OperatorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSameAsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSameAsEqualsSignKeyword_0_0 = (Keyword)cSameAsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDifferentFromEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDifferentFromNotKeyword_1_0 = (Keyword)cDifferentFromEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessThanLessThanSignKeyword_2_0 = (Keyword)cLessThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanGreaterThanSignKeyword_3_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OperatorType returns OperatorType:
		//                SameAs = '=' | DifferentFrom = 'not' | LessThan = '<' | GreaterThan = '>';
		public EnumRule getRule() { return rule; }
		
		//SameAs = '=' | DifferentFrom = 'not' | LessThan = '<' | GreaterThan = '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SameAs = '='
		public EnumLiteralDeclaration getSameAsEnumLiteralDeclaration_0() { return cSameAsEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getSameAsEqualsSignKeyword_0_0() { return cSameAsEqualsSignKeyword_0_0; }
		
		//DifferentFrom = 'not'
		public EnumLiteralDeclaration getDifferentFromEnumLiteralDeclaration_1() { return cDifferentFromEnumLiteralDeclaration_1; }
		
		//'not'
		public Keyword getDifferentFromNotKeyword_1_0() { return cDifferentFromNotKeyword_1_0; }
		
		//LessThan = '<'
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_2() { return cLessThanEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLessThanLessThanSignKeyword_2_0() { return cLessThanLessThanSignKeyword_2_0; }
		
		//GreaterThan = '>'
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_3() { return cGreaterThanEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGreaterThanGreaterThanSignKeyword_3_0() { return cGreaterThanGreaterThanSignKeyword_3_0; }
	}
	public class RestrictedOperatorTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "muslan.query.MuslanQuery.RestrictedOperatorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSameAsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSameAsEqualsSignKeyword_0_0 = (Keyword)cSameAsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDifferentFromEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDifferentFromNotKeyword_1_0 = (Keyword)cDifferentFromEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RestrictedOperatorType returns OperatorType:
		//                SameAs = '=' | DifferentFrom = 'not';
		public EnumRule getRule() { return rule; }
		
		//SameAs = '=' | DifferentFrom = 'not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SameAs = '='
		public EnumLiteralDeclaration getSameAsEnumLiteralDeclaration_0() { return cSameAsEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getSameAsEqualsSignKeyword_0_0() { return cSameAsEqualsSignKeyword_0_0; }
		
		//DifferentFrom = 'not'
		public EnumLiteralDeclaration getDifferentFromEnumLiteralDeclaration_1() { return cDifferentFromEnumLiteralDeclaration_1; }
		
		//'not'
		public Keyword getDifferentFromNotKeyword_1_0() { return cDifferentFromNotKeyword_1_0; }
	}
	
	private final QueryElements pQuery;
	private final CategorizedElementTypeElements eCategorizedElementType;
	private final EStringElements pEString;
	private final FilterClauseElements pFilterClause;
	private final ClauseElements pClause;
	private final CategoryClauseElements pCategoryClause;
	private final CategoryTypeElements eCategoryType;
	private final ArtistClauseElements pArtistClause;
	private final TitleClauseElements pTitleClause;
	private final OperatorTypeElements eOperatorType;
	private final RestrictedOperatorTypeElements eRestrictedOperatorType;
	private final OrClauseElements pOrClause;
	private final OrContentElements pOrContent;
	private final AndClauseElements pAndClause;
	private final AndContentElements pAndContent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MuslanQueryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuery = new QueryElements();
		this.eCategorizedElementType = new CategorizedElementTypeElements();
		this.pEString = new EStringElements();
		this.pFilterClause = new FilterClauseElements();
		this.pClause = new ClauseElements();
		this.pCategoryClause = new CategoryClauseElements();
		this.eCategoryType = new CategoryTypeElements();
		this.pArtistClause = new ArtistClauseElements();
		this.pTitleClause = new TitleClauseElements();
		this.eOperatorType = new OperatorTypeElements();
		this.eRestrictedOperatorType = new RestrictedOperatorTypeElements();
		this.pOrClause = new OrClauseElements();
		this.pOrContent = new OrContentElements();
		this.pAndClause = new AndClauseElements();
		this.pAndContent = new AndContentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("muslan.query.MuslanQuery".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Query returns Query:
	//    {Query}
	//    "pick" type=CategorizedElementType "from" collection=[musiccollection::MusicCollection|EString] "with"
	//    filter=FilterClause
	//;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//enum CategorizedElementType:
	//    Track = 'track' | Album = 'album'
	//;
	public CategorizedElementTypeElements getCategorizedElementTypeAccess() {
		return eCategorizedElementType;
	}
	
	public EnumRule getCategorizedElementTypeRule() {
		return getCategorizedElementTypeAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//FilterClause:
	//     Clause | OrClause | AndClause
	//;
	public FilterClauseElements getFilterClauseAccess() {
		return pFilterClause;
	}
	
	public ParserRule getFilterClauseRule() {
		return getFilterClauseAccess().getRule();
	}
	
	//Clause:
	//    CategoryClause | ArtistClause | TitleClause
	//;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//CategoryClause:
	//    category=CategoryType operator=OperatorType value=STRING
	//;
	public CategoryClauseElements getCategoryClauseAccess() {
		return pCategoryClause;
	}
	
	public ParserRule getCategoryClauseRule() {
		return getCategoryClauseAccess().getRule();
	}
	
	//enum CategoryType returns musiccollection::CategoryType:
	//                Rating = 'rating' | Genre = 'genre' | Tag = 'tag'
	//;
	public CategoryTypeElements getCategoryTypeAccess() {
		return eCategoryType;
	}
	
	public EnumRule getCategoryTypeRule() {
		return getCategoryTypeAccess().getRule();
	}
	
	//ArtistClause:
	//    "artist" operator=RestrictedOperatorType value=STRING
	//;
	public ArtistClauseElements getArtistClauseAccess() {
		return pArtistClause;
	}
	
	public ParserRule getArtistClauseRule() {
		return getArtistClauseAccess().getRule();
	}
	
	//TitleClause:
	//    "title" operator=RestrictedOperatorType value=STRING
	//;
	public TitleClauseElements getTitleClauseAccess() {
		return pTitleClause;
	}
	
	public ParserRule getTitleClauseRule() {
		return getTitleClauseAccess().getRule();
	}
	
	//enum OperatorType returns OperatorType:
	//                SameAs = '=' | DifferentFrom = 'not' | LessThan = '<' | GreaterThan = '>';
	public OperatorTypeElements getOperatorTypeAccess() {
		return eOperatorType;
	}
	
	public EnumRule getOperatorTypeRule() {
		return getOperatorTypeAccess().getRule();
	}
	
	//enum RestrictedOperatorType returns OperatorType:
	//                SameAs = '=' | DifferentFrom = 'not';
	public RestrictedOperatorTypeElements getRestrictedOperatorTypeAccess() {
		return eRestrictedOperatorType;
	}
	
	public EnumRule getRestrictedOperatorTypeRule() {
		return getRestrictedOperatorTypeAccess().getRule();
	}
	
	//OrClause:
	//    "either" "(" filterclause+=OrContent (("or"|",")? filterclause+=OrContent)+ ")"
	//;
	public OrClauseElements getOrClauseAccess() {
		return pOrClause;
	}
	
	public ParserRule getOrClauseRule() {
		return getOrClauseAccess().getRule();
	}
	
	//OrContent returns FilterClause:
	//    Clause | AndClause
	//;
	public OrContentElements getOrContentAccess() {
		return pOrContent;
	}
	
	public ParserRule getOrContentRule() {
		return getOrContentAccess().getRule();
	}
	
	//AndClause:
	//    "both" "(" filterclause+=AndContent (("and"|",")? filterclause+=AndContent)+ ")"
	//;
	public AndClauseElements getAndClauseAccess() {
		return pAndClause;
	}
	
	public ParserRule getAndClauseRule() {
		return getAndClauseAccess().getRule();
	}
	
	//AndContent returns FilterClause:
	//    Clause | OrClause
	//;
	public AndContentElements getAndContentAccess() {
		return pAndContent;
	}
	
	public ParserRule getAndContentRule() {
		return getAndContentAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
