/*
 * generated by Xtext 2.38.0
 */
package muslan.query.serializer;

import com.google.inject.Inject;
import java.util.List;
import muslan.query.services.MuslanQueryGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MuslanQuerySyntacticSequencer extends AbstractSyntacticSequencer {

	protected MuslanQueryGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AndClause___AndKeyword_3_0_0_or_CommaKeyword_3_0_1__q;
	protected AbstractElementAlias match_OrClause___CommaKeyword_3_0_1_or_OrKeyword_3_0_0__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MuslanQueryGrammarAccess) access;
		match_AndClause___AndKeyword_3_0_0_or_CommaKeyword_3_0_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getAndClauseAccess().getAndKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getAndClauseAccess().getCommaKeyword_3_0_1()));
		match_OrClause___CommaKeyword_3_0_1_or_OrKeyword_3_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getOrClauseAccess().getCommaKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getOrClauseAccess().getOrKeyword_3_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AndClause___AndKeyword_3_0_0_or_CommaKeyword_3_0_1__q.equals(syntax))
				emit_AndClause___AndKeyword_3_0_0_or_CommaKeyword_3_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OrClause___CommaKeyword_3_0_1_or_OrKeyword_3_0_0__q.equals(syntax))
				emit_OrClause___CommaKeyword_3_0_1_or_OrKeyword_3_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('and' | ',')?
	 *
	 * This ambiguous syntax occurs at:
	 *     filterclause+=AndContent (ambiguity) filterclause+=AndContent
	 
	 * </pre>
	 */
	protected void emit_AndClause___AndKeyword_3_0_0_or_CommaKeyword_3_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('or' | ',')?
	 *
	 * This ambiguous syntax occurs at:
	 *     filterclause+=OrContent (ambiguity) filterclause+=OrContent
	 
	 * </pre>
	 */
	protected void emit_OrClause___CommaKeyword_3_0_1_or_OrKeyword_3_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
