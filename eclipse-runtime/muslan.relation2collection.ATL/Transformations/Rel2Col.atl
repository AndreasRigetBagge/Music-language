-- @nsURI MMRelation=https://www.example.org/relation
-- @nsURI MMCollection=https://www.example.org/collection

module Rel2Col;


create OUT : MMCollection
  from IN : MMRelation;

--rule 2 {
	--from s : MMRelation!
	--to t : MMCollection! (
--		 <- ,
		
--	)
--}

rule DerivedCollection2Collection {
	from 
		s : MMRelation!DerivedCollection (
			s.oclIsTypeOf(MMRelation!DerivedCollection)
	)
	to
		t : MMCollection!"Collection" (
		Name <- s.name,
		categorizedelements <- s.getAllTracks()
	)
}

rule MainCollection2DerivedCollection {
	from 
		s : MMRelation!RelationRoot
	to
		t : MMCollection!CollectionRoot (
		collection <- s.derivedCollections()
	)
}

helper context MMRelation!RelationRoot def: derivedCollections() : Sequence(MMCollection!DerivedCollection) =
        self.providers->select(p | not p.oclIsTypeOf(MMRelation!DerivedCollection));

helper context MMRelation!DerivedCollection def: getAllTracks() : Sequence(MMCollection!Track) =
    MMRelation!RelationRoot.allInstances()->collect(r | r.links)->flatten()->select(link | link.outgoing.oclIsTypeOf(MMRelation!DerivedCollection))
        ->collect(link | link.incoming)
        ->select(c | c.oclIsTypeOf(MMRelation!CollectionReference) or c.oclIsTypeOf(MMRelation!DerivedCollection))
        ->collect(c | 
            if c.oclIsTypeOf(MMRelation!CollectionReference) then
                c.pointsTo.categorizedelements->select(t | t.oclIsTypeOf(MMCollection!Track)) -- oclAsType does not exist in ATL
            else
                c.oclAsType(MMRelation!DerivedCollection).getAllTracks()
            endif
        )->flatten();

helper context MMRelation!ICollection def: getTracks() : Sequence(MMCollection!Track) =
    self.tracks->select(t | t.oclIsTypeOf(MMCollection!Track));



